#include <fill_adma_proto_object.h>
#include <get_value.h>

void fill_adma_proto_object(const std::vector<char>& input, pb::ADMA::ADMA_net& adma)
{
  // double get_value(const std::vector<char>& input, int byte_offset, int bit_offset, int length_bits, float scale, float offset, int data_type, double min, double max);
  
  adma.set_status_byte_0(get_value<uint64_t>(input, 96, 0, 8, 1.0, 0, false, 0.0, 255.0));
  adma.set_status_gnss_mode(get_value<uint64_t>(input, 96, 0, 4, 1.0, 0, false, 0.0, 15.0));
  adma.set_status_standstill(get_value<bool>(input, 96, 4, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_status_skidding(get_value<bool>(input, 96, 5, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_status_external_vel_out(get_value<bool>(input, 96, 7, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_status_byte_1(get_value<uint64_t>(input, 97, 0, 8, 1.0, 0, false, 0.0, 255.0));
  adma.set_status_trig_gnss(get_value<bool>(input, 97, 0, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_status_signal_in3(get_value<bool>(input, 97, 1, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_status_signal_in2(get_value<bool>(input, 97, 2, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_status_signal_in1(get_value<bool>(input, 97, 3, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_status_alignment(get_value<bool>(input, 97, 4, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_status_ahrs_ins(get_value<bool>(input, 97, 5, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_status_dead_reckoning(get_value<bool>(input, 97, 6, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_status_synclock(get_value<bool>(input, 97, 7, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_status_byte_2(get_value<uint64_t>(input, 98, 0, 8, 1.0, 0, false, 0.0, 255.0));
  adma.set_status_evk_activ(get_value<bool>(input, 98, 0, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_status_evk_estimates(get_value<bool>(input, 98, 1, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_status_heading_executed(get_value<bool>(input, 98, 2, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_status_config_changed(get_value<bool>(input, 98, 3, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_status_tilt(get_value<uint64_t>(input, 98, 4, 2, 1.0, 0, false, 0.0, 3.0));
  adma.set_status_pos(get_value<uint64_t>(input, 98, 6, 2, 1.0, 0, false, 0.0, 3.0));
  adma.set_status_byte_3(get_value<uint64_t>(input, 99, 0, 8, 1.0, 0, false, 0.0, 255.0));
  adma.set_status_count(get_value<uint64_t>(input, 99, 0, 8, 1.0, 0, false, 0.0, 255.0));
  adma.set_status_byte_4(get_value<uint64_t>(input, 100, 0, 8, 1.0, 0, false, 0.0, 255.0));
  adma.set_status_kalmanfilter_settled(get_value<bool>(input, 100, 0, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_status_kf_lat_stimulated(get_value<bool>(input, 100, 1, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_status_kf_long_stimulated(get_value<bool>(input, 100, 2, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_status_kf_steady_state(get_value<bool>(input, 100, 3, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_status_speed(get_value<uint64_t>(input, 100, 4, 2, 1.0, 0, false, 0.0, 3.0));
  adma.set_status_byte_5(get_value<uint64_t>(input, 101, 0, 8, 1.0, 0, false, 0.0, 255.0));
  adma.set_status_robot(get_value<uint64_t>(input, 101, 0, 4, 1.0, 0, false, 0.0, 15.0));
  adma.set_status_byte_6(get_value<uint64_t>(input, 102, 0, 8, 1.0, 0, false, 0.0, 255.0));
  adma.set_status_byte_7(get_value<uint64_t>(input, 103, 0, 8, 1.0, 0, false, 0.0, 255.0));
  adma.set_error_byte_0(get_value<uint64_t>(input, 104, 0, 8, 1.0, 0, false, 0.0, 255.0));
  adma.set_error_hardware(get_value<uint64_t>(input, 104, 0, 4, 1.0, 0, false, 0.0, 15.0));
  adma.set_error_gyro_hw(get_value<bool>(input, 104, 0, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_error_accel_hw(get_value<bool>(input, 104, 1, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_error_ext_speed_hw(get_value<bool>(input, 104, 2, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_error_gnss_hw(get_value<bool>(input, 104, 3, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_error_misc1(get_value<uint64_t>(input, 104, 4, 4, 1.0, 0, false, 0.0, 15.0));
  adma.set_error_data_bus_checksum(get_value<bool>(input, 104, 4, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_error_eeprom(get_value<bool>(input, 104, 5, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_error_xmit(get_value<bool>(input, 104, 6, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_error_cmd(get_value<bool>(input, 104, 7, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_error_byte_1(get_value<uint64_t>(input, 105, 0, 8, 1.0, 0, false, 0.0, 255.0));
  adma.set_error_misc2(get_value<uint64_t>(input, 105, 0, 4, 1.0, 0, false, 0.0, 15.0));
  adma.set_error_data_bus(get_value<bool>(input, 105, 0, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_error_can_bus(get_value<bool>(input, 105, 1, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_error_num(get_value<bool>(input, 105, 3, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_error_misc3(get_value<uint64_t>(input, 105, 4, 4, 1.0, 0, false, 0.0, 15.0));
  adma.set_error_temp_warning(get_value<bool>(input, 105, 4, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_error_reduced_accuracy(get_value<bool>(input, 105, 5, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_error_range_max(get_value<bool>(input, 105, 6, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_error_byte_2(get_value<uint64_t>(input, 106, 0, 8, 1.0, 0, false, 0.0, 255.0));
  adma.set_warn_gnss(get_value<uint64_t>(input, 106, 0, 4, 1.0, 0, false, 0.0, 15.0));
  adma.set_warn_gnss_no_solution(get_value<bool>(input, 106, 0, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_warn_gnss_vel_ignored(get_value<bool>(input, 106, 1, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_warn_gnss_pos_ignored(get_value<bool>(input, 106, 2, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_warn_gnss_unable_to_cfg(get_value<bool>(input, 106, 3, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_warn_misc1(get_value<uint64_t>(input, 106, 4, 4, 1.0, 0, false, 0.0, 15.0));
  adma.set_warn_speed_off(get_value<bool>(input, 106, 4, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_warn_gnss_dualant_ignored(get_value<bool>(input, 106, 5, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_error_byte_3(get_value<uint64_t>(input, 107, 0, 8, 1.0, 0, false, 0.0, 255.0));
  adma.set_error_hw_sticky(get_value<bool>(input, 107, 0, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_acc_body_hr_x(get_value<double>(input, 112, 0, 32, 0.0001, 0, true, -10.0, 10.0));
  adma.set_rate_body_hr_x(get_value<double>(input, 116, 0, 32, 0.0001, 0, true, -320.0, 320.0));
  adma.set_acc_body_hr_y(get_value<double>(input, 120, 0, 32, 0.0001, 0, true, -10.0, 10.0));
  adma.set_rate_body_hr_y(get_value<double>(input, 124, 0, 32, 0.0001, 0, true, -320.0, 320.0));
  adma.set_acc_body_hr_z(get_value<double>(input, 128, 0, 32, 0.0001, 0, true, -10.0, 10.0));
  adma.set_rate_body_hr_z(get_value<double>(input, 132, 0, 32, 0.0001, 0, true, -320.0, 320.0));
  adma.set_rate_body_x(get_value<double>(input, 136, 0, 16, 0.01, 0, true, -320.0, 320.0));
  adma.set_rate_body_y(get_value<double>(input, 138, 0, 16, 0.01, 0, true, -320.0, 320.0));
  adma.set_rate_body_z(get_value<double>(input, 140, 0, 16, 0.01, 0, true, -320.0, 320.0));
  adma.set_rate_hor_x(get_value<double>(input, 144, 0, 16, 0.01, 0, true, -320.0, 320.0));
  adma.set_rate_hor_y(get_value<double>(input, 146, 0, 16, 0.01, 0, true, -320.0, 320.0));
  adma.set_rate_hor_z(get_value<double>(input, 148, 0, 16, 0.01, 0, true, -320.0, 320.0));
  adma.set_acc_body_x(get_value<double>(input, 152, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_y(get_value<double>(input, 154, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_z(get_value<double>(input, 156, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_x(get_value<double>(input, 160, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_y(get_value<double>(input, 162, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_z(get_value<double>(input, 164, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_x_poi1(get_value<double>(input, 168, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_y_poi1(get_value<double>(input, 170, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_z_poi1(get_value<double>(input, 172, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_x_poi2(get_value<double>(input, 176, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_y_poi2(get_value<double>(input, 178, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_z_poi2(get_value<double>(input, 180, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_x_poi3(get_value<double>(input, 184, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_y_poi3(get_value<double>(input, 186, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_z_poi3(get_value<double>(input, 188, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_x_poi4(get_value<double>(input, 192, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_y_poi4(get_value<double>(input, 194, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_z_poi4(get_value<double>(input, 196, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_x_poi5(get_value<double>(input, 200, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_y_poi5(get_value<double>(input, 202, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_z_poi5(get_value<double>(input, 204, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_x_poi6(get_value<double>(input, 208, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_y_poi6(get_value<double>(input, 210, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_z_poi6(get_value<double>(input, 212, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_x_poi7(get_value<double>(input, 216, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_y_poi7(get_value<double>(input, 218, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_z_poi7(get_value<double>(input, 220, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_x_poi8(get_value<double>(input, 224, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_y_poi8(get_value<double>(input, 226, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_body_z_poi8(get_value<double>(input, 228, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_x_poi1(get_value<double>(input, 232, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_y_poi1(get_value<double>(input, 234, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_z_poi1(get_value<double>(input, 236, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_x_poi2(get_value<double>(input, 240, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_y_poi2(get_value<double>(input, 242, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_z_poi2(get_value<double>(input, 244, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_x_poi3(get_value<double>(input, 248, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_y_poi3(get_value<double>(input, 250, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_z_poi3(get_value<double>(input, 252, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_x_poi4(get_value<double>(input, 256, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_y_poi4(get_value<double>(input, 258, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_z_poi4(get_value<double>(input, 260, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_x_poi5(get_value<double>(input, 264, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_y_poi5(get_value<double>(input, 266, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_z_poi5(get_value<double>(input, 268, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_x_poi6(get_value<double>(input, 272, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_y_poi6(get_value<double>(input, 274, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_z_poi6(get_value<double>(input, 276, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_x_poi7(get_value<double>(input, 280, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_y_poi7(get_value<double>(input, 282, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_z_poi7(get_value<double>(input, 284, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_x_poi8(get_value<double>(input, 288, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_y_poi8(get_value<double>(input, 290, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_acc_hor_z_poi8(get_value<double>(input, 292, 0, 16, 0.0004, 0, true, -13.1, 13.1));
  adma.set_ext_vel_an_x(get_value<double>(input, 296, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ext_vel_an_y(get_value<double>(input, 298, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ext_vel_dig_x(get_value<double>(input, 304, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ext_vel_dig_y(get_value<double>(input, 306, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ext_vel_dig_pulses_x(get_value<uint64_t>(input, 308, 0, 16, 1.0, 0, false, 0.0, 65535.0));
  adma.set_ext_vel_dig_pulses_y(get_value<uint64_t>(input, 310, 0, 16, 1.0, 0, false, 0.0, 65535.0));
  adma.set_ext_vel_x_corrected(get_value<double>(input, 312, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ext_vel_y_corrected(get_value<double>(input, 314, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_inv_path_radius(get_value<double>(input, 344, 0, 16, 0.0001, 0, true, -3.2767, 3.2767));
  adma.set_side_slip_angle(get_value<double>(input, 346, 0, 16, 0.01, 0, true, -180.0, 180.0));
  adma.set_dist_trav(get_value<double>(input, 348, 0, 32, 0.01, 0, false, 0.0, 1000000.0));
  adma.set_inv_path_radius_poi1(get_value<double>(input, 352, 0, 16, 0.0001, 0, true, -3.2767, 3.2767));
  adma.set_side_slip_angle_poi1(get_value<double>(input, 354, 0, 16, 0.01, 0, true, -180.0, 180.0));
  adma.set_dist_trav_poi1(get_value<double>(input, 356, 0, 32, 0.01, 0, false, 0.0, 1000000.0));
  adma.set_inv_path_radius_poi2(get_value<double>(input, 360, 0, 16, 0.0001, 0, true, -3.2767, 3.2767));
  adma.set_side_slip_angle_poi2(get_value<double>(input, 362, 0, 16, 0.01, 0, true, -180.0, 180.0));
  adma.set_dist_trav_poi2(get_value<double>(input, 364, 0, 32, 0.01, 0, false, 0.0, 1000000.0));
  adma.set_inv_path_radius_poi3(get_value<double>(input, 368, 0, 16, 0.0001, 0, true, -3.2767, 3.2767));
  adma.set_side_slip_angle_poi3(get_value<double>(input, 370, 0, 16, 0.01, 0, true, -180.0, 180.0));
  adma.set_dist_trav_poi3(get_value<double>(input, 372, 0, 32, 0.01, 0, false, 0.0, 1000000.0));
  adma.set_inv_path_radius_poi4(get_value<double>(input, 376, 0, 16, 0.0001, 0, true, -3.2767, 3.2767));
  adma.set_side_slip_angle_poi4(get_value<double>(input, 378, 0, 16, 0.01, 0, true, -180.0, 180.0));
  adma.set_dist_trav_poi4(get_value<double>(input, 380, 0, 32, 0.01, 0, false, 0.0, 1000000.0));
  adma.set_inv_path_radius_poi5(get_value<double>(input, 384, 0, 16, 0.0001, 0, true, -3.2767, 3.2767));
  adma.set_side_slip_angle_poi5(get_value<double>(input, 386, 0, 16, 0.01, 0, true, -180.0, 180.0));
  adma.set_dist_trav_poi5(get_value<double>(input, 388, 0, 32, 0.01, 0, false, 0.0, 1000000.0));
  adma.set_inv_path_radius_poi6(get_value<double>(input, 392, 0, 16, 0.0001, 0, true, -3.2767, 3.2767));
  adma.set_side_slip_angle_poi6(get_value<double>(input, 394, 0, 16, 0.01, 0, true, -180.0, 180.0));
  adma.set_dist_trav_poi6(get_value<double>(input, 396, 0, 32, 0.01, 0, false, 0.0, 1000000.0));
  adma.set_inv_path_radius_poi7(get_value<double>(input, 400, 0, 16, 0.0001, 0, true, -3.2767, 3.2767));
  adma.set_side_slip_angle_poi7(get_value<double>(input, 402, 0, 16, 0.01, 0, true, -180.0, 180.0));
  adma.set_dist_trav_poi7(get_value<double>(input, 404, 0, 32, 0.01, 0, false, 0.0, 1000000.0));
  adma.set_inv_path_radius_poi8(get_value<double>(input, 408, 0, 16, 0.0001, 0, true, -3.2767, 3.2767));
  adma.set_side_slip_angle_poi8(get_value<double>(input, 410, 0, 16, 0.01, 0, true, -180.0, 180.0));
  adma.set_dist_trav_poi8(get_value<double>(input, 412, 0, 32, 0.01, 0, false, 0.0, 1000000.0));
  adma.set_trig_rising_1(get_value<uint64_t>(input, 416, 0, 16, 1.0, 0, false, 1.0, 20000.0));
  adma.set_trig_falling_1(get_value<uint64_t>(input, 418, 0, 16, 1.0, 0, false, 1.0, 20000.0));
  adma.set_trig_rising_2(get_value<uint64_t>(input, 420, 0, 16, 1.0, 0, false, 1.0, 20000.0));
  adma.set_trig_falling_2(get_value<uint64_t>(input, 422, 0, 16, 1.0, 0, false, 1.0, 20000.0));
  adma.set_trig_rising_3(get_value<uint64_t>(input, 424, 0, 16, 1.0, 0, false, 1.0, 20000.0));
  adma.set_trig_falling_3(get_value<uint64_t>(input, 426, 0, 16, 1.0, 0, false, 1.0, 20000.0));
  adma.set_trig_rising_4(get_value<uint64_t>(input, 428, 0, 16, 1.0, 0, false, 1.0, 20000.0));
  adma.set_trig_falling_4(get_value<uint64_t>(input, 430, 0, 16, 1.0, 0, false, 1.0, 20000.0));
  adma.set_system_ta(get_value<uint64_t>(input, 432, 0, 16, 1.0, 0, false, 1000.0, 20000.0));
  adma.set_system_temp(get_value<double>(input, 434, 0, 16, 0.1, 0, true, -127.0, 127.0));
  adma.set_system_timesinceinit(get_value<uint64_t>(input, 436, 0, 16, 1.0, 0, false, 0.0, 65535.0));
  adma.set_system_dsp_load(get_value<double>(input, 438, 0, 16, 0.1, 0, false, 0.0, 100.0));
  adma.set_gnss_lat_abs(get_value<double>(input, 440, 0, 32, 1e-07, 0, true, -90.0, 90.0));
  adma.set_gnss_long_abs(get_value<double>(input, 444, 0, 32, 1e-07, 0, true, -180.0, 180.0));
  adma.set_gnss_pos_rel_x(get_value<double>(input, 448, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_gnss_pos_rel_y(get_value<double>(input, 452, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_gnss_stddev_lat(get_value<double>(input, 456, 0, 16, 0.001, 0, false, 0.0, 60.0));
  adma.set_gnss_stddev_long(get_value<double>(input, 458, 0, 16, 0.001, 0, false, 0.0, 60.0));
  adma.set_gnss_stddev_height(get_value<double>(input, 460, 0, 16, 0.001, 0, false, 0.0, 60.0));
  adma.set_gnss_vel_frame_x(get_value<double>(input, 464, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_gnss_vel_frame_y(get_value<double>(input, 466, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_gnss_vel_frame_z(get_value<double>(input, 468, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_gnss_vel_latency(get_value<double>(input, 470, 0, 16, 0.001, 0, false, 0.0, 60.0));
  adma.set_gnss_stddev_vel_x(get_value<double>(input, 472, 0, 16, 0.001, 0, false, 0.0, 60.0));
  adma.set_gnss_stddev_vel_y(get_value<double>(input, 474, 0, 16, 0.001, 0, false, 0.0, 60.0));
  adma.set_gnss_stddev_vel_z(get_value<double>(input, 476, 0, 16, 0.001, 0, false, 0.0, 60.0));
  adma.set_gnss_time_msec(get_value<uint64_t>(input, 480, 0, 32, 1.0, 0, false, 0.0, 604800000.0));
  adma.set_gnss_time_week(get_value<uint64_t>(input, 484, 0, 16, 1.0, 0, false, 0.0, 65536.0));
  adma.set_trigger_gnss(get_value<uint64_t>(input, 486, 0, 16, 1.0, 0, false, 1000.0, 20000.0));
  adma.set_gnss_diffage(get_value<double>(input, 488, 0, 16, 0.1, 0, false, 0.0, 60.0));
  adma.set_gnss_sats_used(get_value<uint64_t>(input, 490, 0, 8, 1.0, 0, false, 0.0, 100.0));
  adma.set_gnss_sats_visible(get_value<uint64_t>(input, 491, 0, 8, 1.0, 0, false, 0.0, 100.0));
  adma.set_gnss_sats_dualant_used(get_value<uint64_t>(input, 492, 0, 8, 1.0, 0, false, 0.0, 100.0));
  adma.set_gnss_sats_dualant_visible(get_value<uint64_t>(input, 493, 0, 8, 1.0, 0, false, 0.0, 100.0));
  adma.set_gnss_log_delay(get_value<uint64_t>(input, 496, 0, 8, 1.0, 0, false, 0.0, 20.0));
  adma.set_gnss_receiver_load(get_value<double>(input, 497, 0, 8, 0.5, 0, false, 0.0, 100.0));
  adma.set_gnss_basenr(get_value<uint64_t>(input, 498, 0, 32, 1.0, 0, false, 0.0, 4294967295.0));
  adma.set_ins_roll(get_value<double>(input, 504, 0, 16, 0.01, 0, true, -60.0, 60.0));
  adma.set_ins_pitch(get_value<double>(input, 506, 0, 16, 0.01, 0, true, -60.0, 60.0));
  adma.set_ins_yaw(get_value<double>(input, 508, 0, 16, 0.01, 0, false, 0.0, 359.99));
  adma.set_gnss_cog(get_value<double>(input, 510, 0, 16, 0.01, 0, false, 0.0, 359.99));
  adma.set_gnss_height(get_value<double>(input, 512, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_undulation(get_value<double>(input, 516, 0, 16, 0.01, 0, true, -327.68, 327.67));
  adma.set_gnss_dualant_time_msec(get_value<uint64_t>(input, 520, 0, 32, 1.0, 0, false, 0.0, 604800000.0));
  adma.set_gnss_dualant_time_week(get_value<uint64_t>(input, 524, 0, 16, 1.0, 0, false, 0.0, 65536.0));
  adma.set_gnss_dualant_heading(get_value<double>(input, 528, 0, 16, 0.01, 0, false, 0.0, 359.99));
  adma.set_gnss_dualant_pitch(get_value<double>(input, 530, 0, 16, 0.01, 0, true, -60.0, 60.0));
  adma.set_gnss_dualant_stddev_heading(get_value<double>(input, 536, 0, 8, 0.01, 0, false, 0.01, 2.55));
  adma.set_gnss_dualant_stddev_pitch(get_value<double>(input, 537, 0, 8, 0.01, 0, false, 0.01, 2.55));
  adma.set_gnss_dualant_stddev_heading_hr(get_value<double>(input, 538, 0, 16, 0.01, 0, false, 0.01, 359.99));
  adma.set_gnss_dualant_stddev_pitch_hr(get_value<double>(input, 540, 0, 16, 0.01, 0, false, 0.01, 359.99));
  adma.set_ins_height(get_value<double>(input, 544, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_height_poi1(get_value<double>(input, 552, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_height_poi2(get_value<double>(input, 556, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_height_poi3(get_value<double>(input, 560, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_height_poi4(get_value<double>(input, 564, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_height_poi5(get_value<double>(input, 568, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_height_poi6(get_value<double>(input, 572, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_height_poi7(get_value<double>(input, 576, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_height_poi8(get_value<double>(input, 580, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_time_msec(get_value<uint64_t>(input, 584, 0, 32, 1.0, 0, false, 0.0, 604800000.0));
  adma.set_ins_time_week(get_value<uint64_t>(input, 588, 0, 16, 1.0, 0, false, 0.0, 65536.0));
  adma.set_leap_seconds(get_value<uint64_t>(input, 590, 0, 16, 1.0, 0, false, 0.0, 100.0));
  adma.set_ins_lat_abs(get_value<double>(input, 592, 0, 32, 1e-07, 0, true, -90.0, 90.0));
  adma.set_ins_long_abs(get_value<double>(input, 596, 0, 32, 1e-07, 0, true, -180.0, 180.0));
  adma.set_ins_pos_rel_x(get_value<double>(input, 600, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_pos_rel_y(get_value<double>(input, 604, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_lat_abs_poi1(get_value<double>(input, 608, 0, 32, 1e-07, 0, true, -90.0, 90.0));
  adma.set_ins_long_abs_poi1(get_value<double>(input, 612, 0, 32, 1e-07, 0, true, -180.0, 180.0));
  adma.set_ins_pos_rel_x_poi1(get_value<double>(input, 616, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_pos_rel_y_poi1(get_value<double>(input, 620, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_lat_abs_poi2(get_value<double>(input, 624, 0, 32, 1e-07, 0, true, -90.0, 90.0));
  adma.set_ins_long_abs_poi2(get_value<double>(input, 628, 0, 32, 1e-07, 0, true, -180.0, 180.0));
  adma.set_ins_pos_rel_x_poi2(get_value<double>(input, 632, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_pos_rel_y_poi2(get_value<double>(input, 636, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_lat_abs_poi3(get_value<double>(input, 640, 0, 32, 1e-07, 0, true, -90.0, 90.0));
  adma.set_ins_long_abs_poi3(get_value<double>(input, 644, 0, 32, 1e-07, 0, true, -180.0, 180.0));
  adma.set_ins_pos_rel_x_poi3(get_value<double>(input, 648, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_pos_rel_y_poi3(get_value<double>(input, 652, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_lat_abs_poi4(get_value<double>(input, 656, 0, 32, 1e-07, 0, true, -90.0, 90.0));
  adma.set_ins_long_abs_poi4(get_value<double>(input, 660, 0, 32, 1e-07, 0, true, -180.0, 180.0));
  adma.set_ins_pos_rel_x_poi4(get_value<double>(input, 664, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_pos_rel_y_poi4(get_value<double>(input, 668, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_lat_abs_poi5(get_value<double>(input, 672, 0, 32, 1e-07, 0, true, -90.0, 90.0));
  adma.set_ins_long_abs_poi5(get_value<double>(input, 676, 0, 32, 1e-07, 0, true, -180.0, 180.0));
  adma.set_ins_pos_rel_x_poi5(get_value<double>(input, 680, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_pos_rel_y_poi5(get_value<double>(input, 684, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_lat_abs_poi6(get_value<double>(input, 688, 0, 32, 1e-07, 0, true, -90.0, 90.0));
  adma.set_ins_long_abs_poi6(get_value<double>(input, 692, 0, 32, 1e-07, 0, true, -180.0, 180.0));
  adma.set_ins_pos_rel_x_poi6(get_value<double>(input, 696, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_pos_rel_y_poi6(get_value<double>(input, 700, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_lat_abs_poi7(get_value<double>(input, 704, 0, 32, 1e-07, 0, true, -90.0, 90.0));
  adma.set_ins_long_abs_poi7(get_value<double>(input, 708, 0, 32, 1e-07, 0, true, -180.0, 180.0));
  adma.set_ins_pos_rel_x_poi7(get_value<double>(input, 712, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_pos_rel_y_poi7(get_value<double>(input, 716, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_lat_abs_poi8(get_value<double>(input, 720, 0, 32, 1e-07, 0, true, -90.0, 90.0));
  adma.set_ins_long_abs_poi8(get_value<double>(input, 724, 0, 32, 1e-07, 0, true, -180.0, 180.0));
  adma.set_ins_pos_rel_x_poi8(get_value<double>(input, 728, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_pos_rel_y_poi8(get_value<double>(input, 732, 0, 32, 0.01, 0, true, -21474836.48, 21474836.47));
  adma.set_ins_vel_hor_x(get_value<double>(input, 736, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_y(get_value<double>(input, 738, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_z(get_value<double>(input, 740, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_frame_x(get_value<double>(input, 744, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_frame_y(get_value<double>(input, 746, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_frame_z(get_value<double>(input, 748, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_x_poi1(get_value<double>(input, 752, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_y_poi1(get_value<double>(input, 754, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_z_poi1(get_value<double>(input, 756, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_x_poi2(get_value<double>(input, 760, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_y_poi2(get_value<double>(input, 762, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_z_poi2(get_value<double>(input, 764, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_x_poi3(get_value<double>(input, 768, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_y_poi3(get_value<double>(input, 770, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_z_poi3(get_value<double>(input, 772, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_x_poi4(get_value<double>(input, 776, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_y_poi4(get_value<double>(input, 778, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_z_poi4(get_value<double>(input, 780, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_x_poi5(get_value<double>(input, 784, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_y_poi5(get_value<double>(input, 786, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_z_poi5(get_value<double>(input, 788, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_x_poi6(get_value<double>(input, 792, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_y_poi6(get_value<double>(input, 794, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_z_poi6(get_value<double>(input, 796, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_x_poi7(get_value<double>(input, 800, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_y_poi7(get_value<double>(input, 802, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_z_poi7(get_value<double>(input, 804, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_x_poi8(get_value<double>(input, 808, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_y_poi8(get_value<double>(input, 810, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_vel_hor_z_poi8(get_value<double>(input, 812, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_ins_stddev_lat(get_value<double>(input, 816, 0, 16, 0.01, 0, false, 0.0, 60.0));
  adma.set_ins_stddev_long(get_value<double>(input, 818, 0, 16, 0.01, 0, false, 0.0, 60.0));
  adma.set_ins_stddev_height(get_value<double>(input, 820, 0, 16, 0.01, 0, false, 0.0, 60.0));
  adma.set_ins_stddev_vel_x(get_value<double>(input, 824, 0, 8, 0.01, 0, false, 0.01, 2.55));
  adma.set_ins_stddev_vel_y(get_value<double>(input, 825, 0, 8, 0.01, 0, false, 0.01, 2.55));
  adma.set_ins_stddev_vel_z(get_value<double>(input, 826, 0, 8, 0.01, 0, false, 0.01, 2.55));
  adma.set_ins_stddev_roll(get_value<double>(input, 827, 0, 8, 0.01, 0, false, 0.01, 2.55));
  adma.set_ins_stddev_pitch(get_value<double>(input, 828, 0, 8, 0.01, 0, false, 0.01, 2.55));
  adma.set_ins_stddev_yaw(get_value<double>(input, 829, 0, 8, 0.01, 0, false, 0.01, 2.55));
  adma.set_an1(get_value<double>(input, 832, 0, 16, 0.0005, 0, true, -10.0, 10.0));
  adma.set_an2(get_value<double>(input, 834, 0, 16, 0.0005, 0, true, -10.0, 10.0));
  adma.set_an3(get_value<double>(input, 836, 0, 16, 0.0005, 0, true, -10.0, 10.0));
  adma.set_an4(get_value<double>(input, 838, 0, 16, 0.0005, 0, true, -10.0, 10.0));
  adma.set_kf_lat_stimulated(get_value<uint64_t>(input, 840, 0, 8, 1.0, 0, false, 0.0, 100.0));
  adma.set_kf_long_stimulated(get_value<uint64_t>(input, 841, 0, 8, 1.0, 0, false, 0.0, 100.0));
  adma.set_kf_steady_state(get_value<uint64_t>(input, 842, 0, 8, 1.0, 0, false, 0.0, 100.0));
  adma.set_gnss_receiver_error(get_value<uint64_t>(input, 848, 0, 32, 1.0, 0, false, 0.0, 4294967295.0));
  adma.set_gnss_dram_failure(get_value<bool>(input, 848, 0, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_invalid_firmware(get_value<bool>(input, 848, 1, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_rom_error(get_value<bool>(input, 848, 2, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_esn_error(get_value<bool>(input, 848, 4, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_auth_code_error(get_value<bool>(input, 848, 5, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_supply_voltage_error(get_value<bool>(input, 848, 7, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_temp_error(get_value<bool>(input, 849, 1, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_minos_error(get_value<bool>(input, 849, 2, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_pll_rf_error (get_value<bool>(input, 849, 3, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_nvm_error(get_value<bool>(input, 849, 7, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_softw_error(get_value<bool>(input, 850, 0, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_model_invalid(get_value<bool>(input, 850, 1, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_remote_loading(get_value<bool>(input, 850, 4, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_export_restriction(get_value<bool>(input, 850, 5, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_safe_mode(get_value<bool>(input, 850, 6, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_hardware_failure(get_value<bool>(input, 851, 7, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_receiver_status(get_value<uint64_t>(input, 852, 0, 32, 1.0, 0, false, 0.0, 4294967295.0));
  adma.set_gnss_error_flag(get_value<bool>(input, 852, 0, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_temp_warning(get_value<bool>(input, 852, 1, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_voltage_supply(get_value<bool>(input, 852, 2, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_primant_power(get_value<bool>(input, 852, 3, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_lna_failure(get_value<bool>(input, 852, 4, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_primant_open(get_value<bool>(input, 852, 5, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_primant_short_circuit(get_value<bool>(input, 852, 6, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_cpu_overload(get_value<bool>(input, 852, 7, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_com_overrun(get_value<bool>(input, 853, 0, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_link_overrun(get_value<bool>(input, 853, 3, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_input_overrun(get_value<bool>(input, 853, 4, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_aux_overrun(get_value<bool>(input, 853, 5, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_ant_gain_out_of_range(get_value<bool>(input, 853, 6, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_jammer_detected(get_value<bool>(input, 853, 7, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_almanac_invalid(get_value<bool>(input, 854, 2, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_solution_invalid(get_value<bool>(input, 854, 3, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_position_fixed(get_value<bool>(input, 854, 4, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_clock_steering(get_value<bool>(input, 854, 5, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_clock_model(get_value<bool>(input, 854, 6, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_ext_oscillator(get_value<bool>(input, 854, 7, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_softw_status(get_value<bool>(input, 855, 0, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_version_0(get_value<bool>(input, 855, 1, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_version_1(get_value<bool>(input, 855, 2, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_tracking_mode(get_value<bool>(input, 855, 3, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_dig_filtering(get_value<bool>(input, 855, 4, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_aux_status_3(get_value<bool>(input, 855, 5, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_aux_status_2(get_value<bool>(input, 855, 6, 1, 1.0, 0, false, 0.0, 1.0));
  adma.set_gnss_aux_status_1(get_value<bool>(input, 855, 7, 1, 1.0, 0, false, 0.0, 1.0));
}

void fill_adma_proto_object(const std::vector<char>& input, pb::ADMA::ADMA_delta& adma)
{
  // double get_value(const std::vector<char>& input, int byte_offset, int bit_offset, int length_bits, float scale, float offset, int data_type, double min, double max);
  
  {
    auto target_longitude = adma.mutable_target_longitude();
    int32_t integer_part = get_value<int32_t>(input, 8, 0, 32, 1, 0, true, -2147483648.0, 2147483647.0);
    float floating_part = get_float(input, 8+4, 0, 32);
    target_longitude->set_integer(integer_part);
    target_longitude->set_decimal(floating_part);
    target_longitude->set_interpreted(integer_part * 0.001 + floating_part * 0.001); 
  }
  {
    auto target_latitude = adma.mutable_target_latitude();
    int32_t integer_part = get_value<int32_t>(input, 16, 0, 32, 1, 0, true, -2147483648.0, 2147483647.0);
    float floating_part = get_float(input, 16+4, 0, 32);
    target_latitude->set_integer(integer_part);
    target_latitude->set_decimal(floating_part);
    target_latitude->set_interpreted(integer_part * 0.001 + floating_part * 0.001); 
  }
  adma.set_code_version(get_value<uint64_t>(input, 26, 0, 16, 1.0, 0, false, 0.0, 65535.0));
  adma.set_long_delta_distance(get_float(input, 28, 0, 32));
  adma.set_long_delta_velocity(get_float(input, 32, 0, 32));
  adma.set_lat_delta_distance(get_float(input, 36, 0, 32));
  adma.set_lat_delta_velocity(get_float(input, 40, 0, 32));
  adma.set_resultant_distance(get_float(input, 44, 0, 32));
  adma.set_resultant_velocity(get_float(input, 48, 0, 32));
  adma.set_angle_of_orientation(get_float(input, 52, 0, 32));
  adma.set_delta_time(get_value<int64_t>(input, 60, 0, 32, 1.0, 0, true, -2147483648.0, 2147483647.0));
  adma.set_target_forward_velocity(get_value<double>(input, 64, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_hunter_forward_velocity(get_value<double>(input, 66, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_target_forward_acceleration(get_value<double>(input, 68, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_hunter_forward_acceleration(get_value<double>(input, 70, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_target_lateral_velocity(get_value<double>(input, 72, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_hunter_lateral_velocity(get_value<double>(input, 74, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_target_lateral_acceleration(get_value<double>(input, 76, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_hunter_lateral_acceleration(get_value<double>(input, 78, 0, 16, 0.005, 0, true, -160.0, 160.0));
  adma.set_target_pitch_angle(get_value<double>(input, 80, 0, 16, 0.02, 0, true, -180.0, 180.0));
  adma.set_hunter_pitch_angle(get_value<double>(input, 82, 0, 16, 0.02, 0, true, -180.0, 180.0));
  adma.set_target_gps_mode(get_value<uint64_t>(input, 84, 0, 16, 1.0, 0, false, 0.0, 9.0));
  adma.set_hunter_gps_mode(get_value<uint64_t>(input, 86, 0, 16, 1.0, 0, false, 0.0, 9.0));
}
